package com.safeway.emclclient.emcl.mapper;

import com.safeway.emclclient.emcl.dto.*;
import com.safeway.emclclient.emcl.model.CustomerInformation;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static com.safeway.emclclient.emcl.utils.EMCLProxyConstants.*;

@Service
public class EMCLCustomerInformationMapper {
    private static final Log logger = LogFactory.getLog(EMCLCustomerInformationMapper.class);
    /**
     * Converts incoming UpdateCustomerProfileDTO into plan CustomerInformation object
     * @param updateCustomerProfileDTO
     * @return
     */
    public CustomerInformation convertToCustomerInformation(UpdateCustomerProfileDTO updateCustomerProfileDTO) {
        CustomerInformation customerInformation = new CustomerInformation();

        // Extract the Event part of the payload
        this.extractMetadata(customerInformation, updateCustomerProfileDTO);

        // Converting the Data part of the payload
        this.extractData(customerInformation, updateCustomerProfileDTO);

        // Validate EventTypes against data within the payload
        String eventType = customerInformation.getEventType();
        if (eventType.equals(HOUSEHOLD_EVENT) && customerInformation.getHouseHold().equals(IGNORE_STR)) {
            String error = "Event: " + eventType + ", but no HouseHold number was provided!";
            logger.warn(error);
            throw new IllegalArgumentException(error);
        }
        if (eventType.equals(CARDLESS_REGISTRATION_SMS_EVENT) || eventType.equals(REGISTRATION_REMINDER_SMS_EVENT)) {
            if (customerInformation.getProfilePublishInd().equals(IGNORE_STR)) {
                String error = "Event: " + eventType + ", but no PublishProfile indicator was provided!";
                logger.warn(error);
                throw new IllegalArgumentException(error);
            }
        }

        logger.debug("Event Type: " + customerInformation.getEventType() +
                ", Aggregate Id: " + customerInformation.getAggregateId() +
                ", Alternate Id: " + customerInformation.getGuid() +
                ", Request Id: " + customerInformation.getRequestId() +
                ", Phone Number: " + customerInformation.getPhone() +
                ", Club Card Number: " + customerInformation.getClubCard() +
                ", HHID: " + customerInformation.getHouseHold());

        return customerInformation;
    }

    private void extractMetadata(CustomerInformation customerInformation, UpdateCustomerProfileDTO updateCustomerProfileDTO) {
        EventMetadataDTO event = updateCustomerProfileDTO.getEventMetadata();
        String eventType;
        if (event.getEventType() != null) {
            eventType = event.getEventType();
        } else {
            String error = "No eventType found!";
            logger.warn(error);
            throw new IllegalArgumentException(error);
        }
        String requestId = UUID.randomUUID().toString();
        if (event.getRequestId() != null) {
            requestId = event.getRequestId();
        } else {
            logger.info("No requestId present. Using: " + requestId + ", which is autogenerated");
        }
        String clientId = IGNORE_STR;
        if (event.getSource() != null && event.getSource().getClientId() != null) {
            clientId = event.getSource().getClientId();
        }
        String guid = IGNORE_STR;
        if (event.getAlternateId() != null) {
            guid = event.getAlternateId();
        }
        String aggregateId = event.getAggregateId() != null ? event.getAggregateId() : IGNORE_STR;

        customerInformation.setEventType(eventType);
        customerInformation.setMessageVersion(MSG_VERSION);
        customerInformation.setRequestId(requestId);
        customerInformation.setClientId(clientId);
        customerInformation.setAggregateId(aggregateId);
        customerInformation.setGuid(guid);
    }

    private void extractData(CustomerInformation customerInformation, UpdateCustomerProfileDTO updateCustomerProfileDTO) {
        int storeNum = DEFAULT_STORE_NUMBER;
        int terminalNum = DEFAULT_TERMINAL_NUMBER;
        short transNum = DEFAULT_TRANSACTION_NUMBER;
        short seqNum = DEFAULT_SEQUENCE_NUMBER;
        String customerNumber = IGNORE_STR;
        String entryCode = DEFAULT_ENTRY_CODE;
        String respCode = DEFAULT_RESP_CODE;

        List<String> clubCards = new ArrayList<>();
        String phoneNumber = IGNORE_STR;
        String householdId = IGNORE_STR;
        String hhidDigitalRegInd = IGNORE_STR;
        String firstName = IGNORE_STR;
        String lastName = IGNORE_STR;
        String emailAddress = IGNORE_STR;
        String emailVerify = IGNORE_STR;
        String profilePublishInd = IGNORE_STR;
        String namePrintedReceipt = IGNORE_INT;
        String customerType = IGNORE_INT;
        String digitalReceipt = IGNORE_INT;
        String digitalReg = IGNORE_INT;

        DataDTO data = updateCustomerProfileDTO.getData();
        if (data != null && !CollectionUtils.isEmpty(data.getProfiles())) {
            ProfileDTO profile = data.getProfiles().get(0);

            if (!CollectionUtils.isEmpty(profile.getStores())) {
                storeNum = Integer.parseInt(profile.getStores().get(0).getStoreNumber());
                terminalNum = profile.getStores().get(0).getTerminalNumber();
            }

            if (!CollectionUtils.isEmpty(profile.getLoyaltyPrograms()) &&
                    profile.getLoyaltyPrograms().get(0).getNumber() != null) {
                for (LoyaltyProgramDTO loyalty : profile.getLoyaltyPrograms()) {
                    if (CLUBCARD.equals(loyalty.getName())) {
                        clubCards.add(loyalty.getNumber());
                    }
                }
            } else {
                String error = "No Club Card number found!";
                logger.warn(error);
                throw new IllegalArgumentException(error);
            }
            if (!CollectionUtils.isEmpty(profile.getPhones()) &&
                    profile.getPhones().get(0).getNumber() != null) {
                String phone = profile.getPhones().get(0).getNumber();
                if (phone.length() > 10) {
                    phoneNumber = phone.substring(phone.length() - 10);
                    logger.warn("Phone number " + phone + " is larger than 10 digits, trimming it to " + phoneNumber);
                } else {
                    phoneNumber = phone;
                }
            }
            if (!CollectionUtils.isEmpty(profile.getHouseholdAccounts())) {
                if (profile.getHouseholdAccounts().get(0).getHouseHoldId() != null) {
                    householdId = profile.getHouseholdAccounts().get(0).getHouseHoldId();
                }
                if (profile.getHouseholdAccounts().get(0).getHhidDigitalRegInd() != null) {
                    hhidDigitalRegInd = profile.getHouseholdAccounts().get(0).getHhidDigitalRegInd();
                }
            }
            if (profile.getName() != null) {
                firstName = profile.getName().getFirstName() != null ? profile.getName().getFirstName() : IGNORE_STR;
                lastName = profile.getName().getLastName() != null ? profile.getName().getLastName() : IGNORE_STR;
            }
            if (profile.getEmail() != null && profile.getEmail().getText() != null) {
                emailAddress = profile.getEmail().getText();
                emailVerify = profile.getEmail().getEmailVerify();
            }

            if (!CollectionUtils.isEmpty(profile.getIndicators())) {
                for (IndicatorDTO ind : profile.getIndicators()) {
                    if (PUBLISH_PROFILE_IND.equals(ind.getType())) {
                        profilePublishInd = ind.getValue();
                    }
                    if (NAME_PRINTED_RECEIPT_IND.equals(ind.getType())) {
                        namePrintedReceipt = ind.getValue();
                    }
                    if (CUSTOMER_TYPE_IND.equals(ind.getType())) {
                        customerType = ind.getValue();
                    }
                    if (DIGITAL_RECEIPT_IND.equals(ind.getType())) {
                        digitalReceipt = ind.getValue();
                    }
                    if (DIGITAL_REG_IND.equals(ind.getType())) {
                        digitalReg = ind.getValue();
                    }
                }
            }
        }

        customerInformation.setStoreNumber(storeNum);
        customerInformation.setTerminalNumber(terminalNum);
        customerInformation.setTransactionNumber(transNum);
        customerInformation.setSequenceNumber(seqNum);
        customerInformation.setCustomerNumber(customerNumber);
        customerInformation.setEntryCode(entryCode);
        customerInformation.setResponseCode(respCode);

        customerInformation.setClubCard(clubCards);
        customerInformation.setPhone(phoneNumber);
        customerInformation.setHouseHold(householdId);
        customerInformation.setFirstName(firstName);
        customerInformation.setLastName(lastName);
        customerInformation.setReceiptPrintInd(namePrintedReceipt);
        customerInformation.setCustomerTypeInd(customerType);
        customerInformation.setCustomerCardRedeemInd(IGNORE_STR);
        customerInformation.setEmail(emailAddress);
        customerInformation.setEmailVerifyInd(emailVerify);
        customerInformation.setDigitalRegInd(digitalReg);
        customerInformation.setDigitalReceiptInd(digitalReceipt);
        customerInformation.setHHIDDigitalRegInd(hhidDigitalRegInd);
        customerInformation.setProfilePublishInd(profilePublishInd);
        customerInformation.setUUID(IGNORE_STR);
        customerInformation.setReservedArea(IGNORE_STR);
    }
}
